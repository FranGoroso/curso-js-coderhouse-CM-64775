[
  {
    "pregunta": "¿Qué es el event loop en JavaScript?",
    "opciones": [
      "a) Un bucle que permite que JavaScript maneje tareas asíncronas",
      "b) Un método para recorrer arrays",
      "c) Una función para detener la ejecución del código",
      "d) Una estructura de datos para manejar eventos"
    ],
    "respuestaCorrecta": "a) Un bucle que permite que JavaScript maneje tareas asíncronas"
  },
  {
    "pregunta": "¿Qué es una closure en JavaScript?",
    "opciones": [
      "a) Una función que recuerda el entorno en el que fue creada",
      "b) Un objeto que encapsula datos y métodos",
      "c) Un tipo de error en el código",
      "d) Una estructura de control para iterar sobre arrays"
    ],
    "respuestaCorrecta": "a) Una función que recuerda el entorno en el que fue creada"
  },
  {
    "pregunta": "¿Qué hace el método bind() en JavaScript?",
    "opciones": [
      "a) Asocia una función a un objeto específico",
      "b) Detiene la ejecución de una función",
      "c) Copia una función en otra variable",
      "d) Llama a una función con un objeto específico"
    ],
    "respuestaCorrecta": "a) Asocia una función a un objeto específico"
  },
  {
    "pregunta": "¿Qué es la herencia prototipal en JavaScript?",
    "opciones": [
      "a) Un modelo de herencia en el que los objetos pueden heredar propiedades y métodos directamente de otros objetos",
      "b) Un modelo de herencia basado en clases",
      "c) Un patrón de diseño para organizar código",
      "d) Una función que permite crear nuevos objetos"
    ],
    "respuestaCorrecta": "a) Un modelo de herencia en el que los objetos pueden heredar propiedades y métodos directamente de otros objetos"
  },
  {
    "pregunta": "¿Qué método se utiliza para crear una promesa en JavaScript?",
    "opciones": [
      "a) new Promise()",
      "b) createPromise()",
      "c) makePromise()",
      "d) promise()"
    ],
    "respuestaCorrecta": "a) new Promise()"
  },
  {
    "pregunta": "¿Qué es una función de orden superior en JavaScript?",
    "opciones": [
      "a) Una función que puede tomar otras funciones como argumentos o devolver una función como resultado",
      "b) Una función que siempre devuelve un valor",
      "c) Una función que solo se puede ejecutar una vez",
      "d) Una función que es llamada automáticamente al cargar la página"
    ],
    "respuestaCorrecta": "a) Una función que puede tomar otras funciones como argumentos o devolver una función como resultado"
  },
  {
    "pregunta": "¿Qué hace el método reduce() en JavaScript?",
    "opciones": [
      "a) Aplica una función a cada elemento de un array para reducirlo a un único valor",
      "b) Ordena los elementos de un array en orden descendente",
      "c) Filtra los elementos de un array según una condición",
      "d) Encuentra el primer elemento que cumple una condición"
    ],
    "respuestaCorrecta": "a) Aplica una función a cada elemento de un array para reducirlo a un único valor"
  },
  {
    "pregunta": "¿Qué es el ámbito léxico en JavaScript?",
    "opciones": [
      "a) El alcance de una variable está determinado por su ubicación dentro del código fuente",
      "b) El alcance de una variable se determina durante la ejecución del programa",
      "c) Una variable solo puede ser accedida dentro de la función en la que se define",
      "d) Una variable global puede ser accedida desde cualquier parte del código"
    ],
    "respuestaCorrecta": "a) El alcance de una variable está determinado por su ubicación dentro del código fuente"
  },
  {
    "pregunta": "¿Qué es el operador spread (...) en JavaScript?",
    "opciones": [
      "a) Un operador que expande un array o un objeto en sus elementos individuales",
      "b) Un operador que combina dos arrays",
      "c) Un operador que crea una copia superficial de un objeto",
      "d) Un operador que intercambia los elementos de un array"
    ],
    "respuestaCorrecta": "a) Un operador que expande un array o un objeto en sus elementos individuales"
  },
  {
    "pregunta": "¿Qué hace el método finally() en una promesa de JavaScript?",
    "opciones": [
      "a) Se ejecuta siempre al final de una promesa, independientemente de si se resolvió o rechazó",
      "b) Resuelve una promesa",
      "c) Rechaza una promesa",
      "d) Cancela una promesa"
    ],
    "respuestaCorrecta": "a) Se ejecuta siempre al final de una promesa, independientemente de si se resolvió o rechazó"
  },
  {
    "pregunta": "¿Qué hace el método `Object.freeze()` en JavaScript?",
    "opciones": [
      "a) Hace que un objeto no pueda ser modificado",
      "b) Elimina todas las propiedades de un objeto",
      "c) Convierte un objeto en un array",
      "d) Ordena las propiedades de un objeto"
    ],
    "respuestaCorrecta": "a) Hace que un objeto no pueda ser modificado"
  },
  {
    "pregunta": "¿Cuál es la diferencia entre `setTimeout` y `setInterval` en JavaScript?",
    "opciones": [
      "a) `setTimeout` ejecuta una función una vez, `setInterval` la ejecuta repetidamente en intervalos",
      "b) `setTimeout` ejecuta una función inmediatamente, `setInterval` la retrasa",
      "c) `setTimeout` cancela una función, `setInterval` la reintenta",
      "d) No hay diferencia entre ellos"
    ],
    "respuestaCorrecta": "a) `setTimeout` ejecuta una función una vez, `setInterval` la ejecuta repetidamente en intervalos"
  },
  {
    "pregunta": "¿Qué es un 'generator' en JavaScript?",
    "opciones": [
      "a) Una función que puede detener su ejecución y luego reanudarla",
      "b) Una función que se ejecuta indefinidamente",
      "c) Una función que siempre devuelve un array",
      "d) Un método para iterar sobre objetos"
    ],
    "respuestaCorrecta": "a) Una función que puede detener su ejecución y luego reanudarla"
  },
  {
    "pregunta": "¿Cuál es el propósito de `async` y `await` en JavaScript?",
    "opciones": [
      "a) Manejar operaciones asincrónicas de manera más sencilla y legible",
      "b) Ejecutar código de forma paralela",
      "c) Bloquear el hilo principal",
      "d) Crear promesas automáticamente"
    ],
    "respuestaCorrecta": "a) Manejar operaciones asincrónicas de manera más sencilla y legible"
  },
  {
    "pregunta": "¿Qué es el 'callback hell' en JavaScript?",
    "opciones": [
      "a) Una situación donde los callbacks están anidados profundamente, haciendo el código difícil de leer y mantener",
      "b) Un tipo de error en las funciones callback",
      "c) Un ciclo infinito de llamadas recursivas",
      "d) Un error cuando se utiliza `async/await` de manera incorrecta"
    ],
    "respuestaCorrecta": "a) Una situación donde los callbacks están anidados profundamente, haciendo el código difícil de leer y mantener"
  },
  {
    "pregunta": "¿Cuál es el propósito de `Reflect` en JavaScript?",
    "opciones": [
      "a) Proporcionar métodos para interceptar las operaciones fundamentales de los objetos",
      "b) Crear nuevos tipos de objetos",
      "c) Manipular el DOM de manera más eficiente",
      "d) Crear objetos inmutables"
    ],
    "respuestaCorrecta": "a) Proporcionar métodos para interceptar las operaciones fundamentales de los objetos"
  },
  {
    "pregunta": "¿Qué es una 'promise chain' en JavaScript?",
    "opciones": [
      "a) Un patrón para manejar promesas en serie, pasando el resultado de una promesa a la siguiente",
      "b) Ejecutar promesas en paralelo",
      "c) Cancelar múltiples promesas a la vez",
      "d) Agrupar varias promesas en una sola"
    ],
    "respuestaCorrecta": "a) Un patrón para manejar promesas en serie, pasando el resultado de una promesa a la siguiente"
  },
  {
    "pregunta": "¿Qué hace el método `Proxy` en JavaScript?",
    "opciones": [
      "a) Permite interceptar y redefinir operaciones fundamentales en objetos",
      "b) Clona un objeto y sus propiedades",
      "c) Convierte un objeto en un array",
      "d) Facilita la manipulación del DOM"
    ],
    "respuestaCorrecta": "a) Permite interceptar y redefinir operaciones fundamentales en objetos"
  },
  {
    "pregunta": "¿Cuál es la diferencia entre `null` y `undefined` en JavaScript?",
    "opciones": [
      "a) `undefined` es el valor por defecto de una variable no inicializada, mientras que `null` es un valor asignado manualmente que representa la ausencia de valor",
      "b) No hay diferencia, ambos representan la ausencia de valor",
      "c) `null` es una palabra reservada y `undefined` no",
      "d) `undefined` es un tipo de objeto, mientras que `null` es un tipo de dato primitivo"
    ],
    "respuestaCorrecta": "a) `undefined` es el valor por defecto de una variable no inicializada, mientras que `null` es un valor asignado manualmente que representa la ausencia de valor"
  },
  {
    "pregunta": "¿Qué es la técnica de memoization en JavaScript?",
    "opciones": [
      "a) Una técnica para almacenar el resultado de funciones costosas y reutilizarlo",
      "b) Un método para limpiar la memoria en JavaScript",
      "c) Un patrón para ordenar objetos en memoria",
      "d) Una función para ejecutar código de manera concurrente"
    ],
    "respuestaCorrecta": "a) Una técnica para almacenar el resultado de funciones costosas y reutilizarlo"
  },
  {
    "pregunta": "¿Cuál es el propósito de `Object.defineProperty()` en JavaScript?",
    "opciones": [
      "a) Definir una nueva propiedad en un objeto con características específicas",
      "b) Eliminar una propiedad de un objeto",
      "c) Crear un nuevo objeto a partir de un prototipo",
      "d) Convertir un objeto en un array"
    ],
    "respuestaCorrecta": "a) Definir una nueva propiedad en un objeto con características específicas"
  },
  {
    "pregunta": "¿Qué hace el método `Function.prototype.apply()` en JavaScript?",
    "opciones": [
      "a) Llama a una función con un valor `this` y argumentos proporcionados en forma de array",
      "b) Llama a una función sin argumentos",
      "c) Copia una función y la asigna a otro objeto",
      "d) Hace que una función se ejecute en segundo plano"
    ],
    "respuestaCorrecta": "a) Llama a una función con un valor `this` y argumentos proporcionados en forma de array"
  },
  {
    "pregunta": "¿Qué es el 'hoisting' en JavaScript?",
    "opciones": [
      "a) El comportamiento por el cual las declaraciones de variables y funciones se mueven al inicio de su contexto de ejecución",
      "b) El proceso de mover funciones de un archivo a otro",
      "c) La ejecución paralela de funciones asíncronas",
      "d) Un método para limpiar variables globales"
    ],
    "respuestaCorrecta": "a) El comportamiento por el cual las declaraciones de variables y funciones se mueven al inicio de su contexto de ejecución"
  },
  {
    "pregunta": "¿Qué diferencia hay entre `call()` y `apply()` en JavaScript?",
    "opciones": [
      "a) `call()` acepta una lista de argumentos, mientras que `apply()` acepta un array de argumentos",
      "b) `call()` es asíncrono y `apply()` es síncrono",
      "c) `apply()` es más rápido que `call()`",
      "d) `call()` solo funciona con funciones anónimas"
    ],
    "respuestaCorrecta": "a) `call()` acepta una lista de argumentos, mientras que `apply()` acepta un array de argumentos"
  },
  {
    "pregunta": "¿Qué es el patrón de diseño 'singleton' en JavaScript?",
    "opciones": [
      "a) Un patrón que restringe la instanciación de una clase a un solo objeto",
      "b) Un patrón que permite la creación de múltiples instancias de un objeto",
      "c) Un patrón que se utiliza para crear objetos inmutables",
      "d) Un patrón que permite crear nuevas funciones automáticamente"
    ],
    "respuestaCorrecta": "a) Un patrón que restringe la instanciación de una clase a un solo objeto"
  },
  {
    "pregunta": "¿Qué hace el método `Object.assign()` en JavaScript?",
    "opciones": [
      "a) Copia todas las propiedades enumerables de uno o más objetos fuente a un objeto destino",
      "b) Elimina las propiedades de un objeto",
      "c) Crea un nuevo objeto a partir de un prototipo",
      "d) Ordena las propiedades de un objeto alfabéticamente"
    ],
    "respuestaCorrecta": "a) Copia todas las propiedades enumerables de uno o más objetos fuente a un objeto destino"
  },
  {
    "pregunta": "¿Qué es la recursión en JavaScript?",
    "opciones": [
      "a) Una función que se llama a sí misma",
      "b) Un bucle que se repite indefinidamente",
      "c) Un método para crear objetos complejos",
      "d) Un tipo de estructura de datos"
    ],
    "respuestaCorrecta": "a) Una función que se llama a sí misma"
  },
  {
    "pregunta": "¿Qué es el concepto de 'pila de llamadas' en JavaScript?",
    "opciones": [
      "a) La estructura de datos que gestiona el orden de ejecución de las funciones",
      "b) Una lista de eventos en espera de ser ejecutados",
      "c) Un método para sincronizar funciones asíncronas",
      "d) Un patrón de diseño para manejar errores"
    ],
    "respuestaCorrecta": "a) La estructura de datos que gestiona el orden de ejecución de las funciones"
  }
]